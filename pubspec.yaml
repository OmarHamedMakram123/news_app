name: app_5_news_app
description: "A new Flutter project."
publish_to: 'none' # Remove this line if you wish to publish to pub.dev

version: 1.0.0+1

environment:
  sdk: ^3.6.0


dependencies:
  flutter:
    sdk: flutter

  cupertino_icons: ^1.0.8
  flutter_native_splash: ^2.0.0
#Customize Flutter's default white native splash screen with background color and splash image. Supports dark mode, full screen, and more.

  dio:
#  A predictable state management library that helps implement the BLoC (Business Logic Component) design pattern.
  retrofit:
#  retrofit.dart is an dio client generator using source_gen and inspired by Chopper and Retrofit.
  logger:
#    Small, easy to use and extensible logger which prints beautiful log
  json_annotation:
#  Classes and helper functions that support JSON code generation via the `json_serializable` package
  bloc:
#  Flutter Widgets that make it easy to implement the BLoC (Business Logic Component) design pattern. Built to be used with the bloc state management package.
  flutter_bloc:
#  Simple direct Service Locator that allows to decouple the interface from a concrete implementation and to access the concrete implementation from everywhere in your App"
  get_it:
#  injectable is a convenient code generator for get_it. Inspired by Angular DI, Guice DI and inject.dart
  injectable:
#    Flutter Secure Storage provides API to store data in secure storage. Keychain is used in iOS, KeyStore based solution is used in Android
  flutter_screenutil:
#    flutter_localizations
#  Flutter Localization is a package use for in-app localization with map data. More easier and faster to implement and inspired by the flutter_localizations itself
  flutter_localizations:
    sdk: flutter
  intl: any
#  Flutter package to show beautiful dialogs(INFO,QUESTION,WARNING,SUCCESS,ERROR) with animations as simply as possible
  awesome_dialog:
#    Render After Effects animations natively on Flutter. This package is a pure Dart implementation of a Lottie player
#  Flutter library to load and cache network images. Can also be used with placeholder and error widgets
  cached_network_image:
#    A flutter package which will help you to generate pin code fields. Can be useful for OTP for example.
  hive:
#    Extension for Hive. Makes it easier to use Hive in Flutter apps
  hive_flutter:
#    GridView with dynamic height. No need to specify aspectRatio to the grid
  dynamic_height_grid_view:
#  A library designed for seamless internet connectivity checks. This library enables you to verify your internet connection and detect slow internet connection
  internet_connection_checker:
#    Render After Effects animations natively on Flutter. This package is a pure Dart implementation of a Lottie player.
  lottie:
#  Flutter plugin for launching a URL. Supports web, phone, SMS, and email schemes.
  url_launcher:


dev_dependencies:
  # injectable is a convenient code generator for get_it. Inspired by Angular DI, Guice DI and inject.dart.
  injectable_generator:
#  A build system for Dart code generation and modular compilation
  build_runner:
#  retrofit generator is an dio client generator using source_gen and inspired by Chopper and Retrofit
  retrofit_generator:
# Automatically generate code for converting to and from JSON by annotating Dart classes
  json_serializable:
#    A testing library which makes it easy to test blocs. Built to be used with the bloc state management package
  bloc_test:
#    Extension for Hive. Automatically generates TypeAdapters to store any class
  hive_generator:

  flutter_test:
    sdk: flutter

  # The "flutter_lints" package below contains a set of recommended lints to
  # encourage good coding practices. The lint set provided by the package is
  # activated in the `analysis_options.yaml` file located at the root of your
  # package. See that file for information about deactivating specific lint
  # rules and activating additional ones.
  flutter_lints: ^5.0.0

# The following section is specific to Flutter packages.
flutter:


  uses-material-design: true
  generate: true
  # To add assets to your application, add an assets section, like this:
  assets:
    - assets/images/
    - assets/animations/

  # An image asset can refer to one or more resolution-specific "variants", see
  # https://flutter.dev/to/resolution-aware-images

  # For details regarding adding assets from package dependencies, see
  # https://flutter.dev/to/asset-from-package

  # To add custom fonts to your application, add a fonts section here,
  # in this "flutter" section. Each entry in this list should have a
  # "family" key with the font family name, and a "fonts" key with a
  # list giving the asset and other descriptors for the font. For
  # example:
  # fonts:
  #   - family: Schyler
  #     fonts:
  #       - asset: fonts/Schyler-Regular.ttf
  #       - asset: fonts/Schyler-Italic.ttf
  #         style: italic
  #   - family: Trajan Pro
  #     fonts:
  #       - asset: fonts/TrajanPro.ttf
  #       - asset: fonts/TrajanPro_Bold.ttf
  #         weight: 700
  #
  # For details regarding fonts from package dependencies,
  # see https://flutter.dev/to/font-from-package
